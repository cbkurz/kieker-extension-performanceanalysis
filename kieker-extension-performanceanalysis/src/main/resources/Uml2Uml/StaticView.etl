@lazy
rule Component
    transform comp1 : UML!Component
    to comp2 : FUML!Component {
		
		comp2.name = comp1.name;
		
		for (op1 in comp1.getOwnedOperations()) {
			var op2 = op1.equivalent();
			comp2.getOwnedOperations().add(op2);
		}
		
		for (cd1 in comp1.getClientDependencies()) {
			var if2 = getInterfaceFromClientDependency(cd1);
			comp2.createInterfaceRealization(cd1.name, if2);
		}
		applyStereotype(comp1, comp2);
	}

@lazy
rule Interface
    transform elem1 : UML!Interface
    to elem2 : FUML!Interface {
    	
    	// generic conversion
		elem1.convertToFutureModel(elem2);
	}
	
@lazy
rule Operation
    transform elem1 : UML!Operation
    to elem2 : FUML!Operation {
    	
    	// generic conversion
		elem1.convertToFutureModel(elem2);
	}
	
@lazy
rule Usage
    transform usage1 : UML!Usage
    to usage2 : FUML!Usage {

		var suppl1 = usage1.getSuppliers().first;
		var suppl2 = getInterface(suppl1.name);

		var client1 = usage1.getClients().first;
		var client2 = getInterface(client1.name);
	
		usage2.getSuppliers().add(suppl2);
		usage2.getClients().add(client2);
		applyStereotype(usage1, usage2);
	}

