import "Operations.eol";
import "Transformations.eol";
import "DynamicView.etl";
import "StaticView.etl";
import "DeploymentView.etl";

rule Model
    transform model1 : UML!Model
    to model2 : FUML!Model {

    	model2.name = "FutureModel";
    	
    	doPackage("staticView-components", "StaticViewPackage", model1, model2);
    	doPackage("deploymentView", "DeploymentViewPackage", model1, model2);
    	doPackage("dynamicView", "DynamicViewPackage", model1, model2);
    	UML!Association.all.equivalent();
    	
    	
    	"Model creation completed".println();

    	"Starting UseCase Transformation...".println();
    	var uc = UT!UseCase.all.first;
    	for (t in uc.transformationRules) {
    		t.transformation(uc);
    	}
    	
    	"Done".println();
    	
	}

@lazy
rule DynamicViewPackage
    transform dynamicView1 : UML!Package
    to dynamicView2 : FUML!Package {
    	dynamicView2.name = dynamicView1.name;
		var useCases2 = UML!UseCase.all.equivalent();
		dynamicView2.getPackagedElements().addAll(useCases2);
	}
	
@lazy
rule DeploymentViewPackage
    transform deploymentView1 : UML!Package
    to deploymentView2 : FUML!Package {
    	
    	deploymentView2.name = deploymentView1.name;
    
		for (pe1 : UML!Artifact in deploymentView1.getPackagedElements()) {
			var pe2 = pe1.equivalent();
			deploymentView2.getPackagedElements().add(pe2);
		}

		for (pe1 : UML!Node in deploymentView1.getPackagedElements()) {
			var pe2 = pe1.equivalent();
			deploymentView2.getPackagedElements().add(pe2);
		}
		applyStereotype(deploymentView1, deploymentView2);
	}
	
@lazy
rule StaticViewPackage
    transform staticView1 : UML!Package
    to staticView2 : FUML!Package {
		
		staticView2.name = staticView1.name;
		
		for (pe1 : UML!Interface in staticView1.getPackagedElements()) {
			var pe2 = pe1.equivalent();
			if (pe2.isDefined()) {
				staticView2.getPackagedElements().add(pe2);
			}
		}

		for (pe1 : UML!Usage in staticView1.getPackagedElements()) {
			var pe2 = pe1.equivalent();
			if (pe2.isDefined()) {
				staticView2.getPackagedElements().add(pe2);
			}
		}	
		
		for (pe1 : UML!Component in staticView1.getPackagedElements()) {
			var pe2 = pe1.equivalent();
			if (pe2.isDefined()) {
				staticView2.getPackagedElements().add(pe2);
			}
		}
		applyStereotype(staticView1, staticView2);
	}

@lazy
rule Association
    transform actorAss1 : UML!Association
    to actorAss2 : FUML!Association {
    
    	guard {
    		var pName = actorAss1.getPackage().name;
    		var isInPackage: Boolean = FUML!Package.all.stream().filter(p|p.name.equals(pName)).findFirst().isPresent();
    		
    		var bothEndsInFutureModel = true;
    		
  		
   			var excludeSeq = new Sequence();
			var modelName = UML!Model.all.first.name;
			excludeSeq.add(modelName);
			var type1_1 = actorAss1.getEndTypes().get(0);
			var type1_2 = actorAss1.getEndTypes().get(1);
	
			var type2_1 = getElementByQualitativeName(type1_1, excludeSeq);
   			var type2_2 = getElementByQualitativeName(type1_2, excludeSeq);
    		
    		if (not type2_1.isDefined() or not type2_2.isDefined()) {
	   			bothEndsInFutureModel = false;
    		}
    		
    		return isInPackage and bothEndsInFutureModel;
    	}
    	// TODO: Associations are incomplete, it is as of now impossible to get a "AggregationKind" Enum
    	if (not (actorAss1.getEndTypes().size() == 2)) {
    		throw "unnsuported amount '" + actorAss1.getEndTypes().size() + "' of types in association: " + actorAss1;
    	}
    	
    	actorAss2.name = actorAss1.name;
		
		var excludeSeq = new Sequence();
		var modelName = UML!Model.all.first.name;
		excludeSeq.add(modelName);
		
		var type1_1 = actorAss1.getEndTypes().get(0);
		var type1_2 = actorAss1.getEndTypes().get(1);
		
		var type2_1 = getElementByQualitativeName(type1_1, excludeSeq);
    	var type2_2 = getElementByQualitativeName(type1_2, excludeSeq);

    	actorAss2.getEndTypes().add(type2_1);
    	actorAss2.getEndTypes().add(type2_2);
		
		type2_1.getPackage()?.getPackagedElements()?.add(actorAss2);
		type2_2.getPackage()?.getPackagedElements()?.add(actorAss2);
    }
