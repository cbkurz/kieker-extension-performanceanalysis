// elem stands for Element
// elem1 or self- the element of the current model that shall be converted
// elem2 - the element of the target model.
operation UML!Element convertToFutureModel(elem2) {

		if (self.name.isDefined()) {
			elem2.name = self.name;
    	}
    	
    	if (hasPackagedElements(self)) {
			doPackagedElements(self, elem2);
    	}
    	applyStereotype(self, elem2);
}

operation doPackagedElements(elem1, elem2) {
elem1.println();
	for (pe1 in elem1.getPackagedElements()) {
			var pe2 = pe1.equivalent();
			if (pe2.isDefined()) {
				elem2.getPackagedElements().add(pe2);
			}
	}
}

operation hasPackagedElements(elem) : Boolean {
	return elem.packagedElements.isDefined() and elem.packagedElements.size() > 0;
}

operation doPackage(name: String, ruleName: String, model1, model2) {
	var package1 = model1.getPackagedElements().selectOne(e | name.equals(e.name));
	if (not package1.isDefined()) {
		throw "Unable to find Packge with name: " + name;
	}
	var package2 = package1.equivalent(ruleName);
	model2.getPackagedElements().add(package2);
}

operation getInterfaceFromClientDependency(clientDependency) {
	var suppl = clientDependency.getSuppliers();
	
	if (not (suppl.size() == 1)) {
		throw "Unexpected size for Interface Realizations: " + suppl;
	}
	
	var name = suppl.first.name;
	
	return getInterface(name);
}

operation getInterface(name) {
	for (pe : UML!Interface in FUML!Interface.all) {
		if (pe.name.isDefined() and pe.name.equals(name)) {
			return pe;
		}
	}
	throw "Unable to find interface: " + name;
}

operation getArtifact(deploymentViewPackage, name) {
	for (pe : UML!Artifact in deploymentViewPackage.getPackagedElements()) {
		if (pe.name.isDefined() and pe.name.equals(name)) {
			return pe;
		}
	}
	throw "Unable to find artifact: " + name;
}

operation getComponent(name) {
	var comps = FUML!Component.all.select(c|name.equals(c.name));
	if (not (comps.size == 1)) {
		throw "Unable to find component: " + name + ". Due to mismatch in comps size: " + comps ;
	}
	return comps.get(0);	
}

operation getType(type) {
	
	var fuml = null;
	var typeName = null;

	if (type.isTypeOf(UML!Actor)) {
		typeName = "Actor";
		fuml = FUML!Actor.all.select(a|type.name.equals(a.name));
	}
	
	if (type.isTypeOf(UML!Component)) {
		typeName = "Component";
		fuml = FUML!Component.all.select(a|type.name.equals(a.name));
	}
	
	if (type.isTypeOf(UML!UseCase)) {
		typeName = "UseCase";
		fuml = FUML!UseCase.all.select(a|type.name.equals(a.name));
	}
	
	if (typeName == null) {
		throw "Unsupported Type of Element: " + type;
	}
	
	if (not (fuml.size() == 1)) {
		throw "Unsuspected amount of " + typeName + " '" + fuml.size() + "', required is exatly one: " + fuml;
	}
	
	return fuml.first;
}

operation applyStereotype(elem1, elem2) {
	for (anno1 in elem1.getEAnnotations()) {
		var anno2 = elem2.getEAnnotation(anno1.source);
		if (not anno2.isDefined()) {
			anno2 = elem2.createEAnnotation(anno1.source);
		}
		var anno2 = elem2.getEAnnotation(anno1.source);
		for (entry1 in anno1.details) {
			anno2.getDetails().put(entry1.key, entry1.value);
		}
	}
}


operation getElementByQualitativeName(elem1, ignoreElements: Sequence) {
	var splitSec = elem1.qualifiedName.split("::");
	splitSec.removeAll(ignoreElements);
	var elem2 = FUML!NamedElement.all.stream()
		.filter(e|e.eClass().equals(elem1.eClass()))
		.filter(e|e.qualifiedName.isDefined())
		.filter(e| e.qualifiedName.split("::").includesAll(splitSec))
		.collect(Native("java.util.stream.Collectors").toList());
	if (not (elem2.size() == 1) and false) {
		("Unsuspected amount of element '" + elem2.size() + "' when searching for FutureUml Equivalent, required is exatly one. Element " + elem1 + " -- Received Sequence: " + elem2).println();
	}
	return elem2.first;
}

operation getMos(mos1: UML!MessageOccurrenceSpecification) : UML!MessageOccurrenceSpecification {
	var name = mos1.name;
	var mos2List = FUML!MessageOccurrenceSpecification.all.stream()
		.filter(f|name.equals(f.name))
		.collect(Native("java.util.stream.Collectors").toList());
	
	return mos2List.get(mos2List.size() - 1);	
}