@namespace(uri="kieker.extension.umltransformation", prefix="umlTransform")
package kieker.extension.umltransformation;

datatype BigDecimal : java.math.BigDecimal;

class Transformation {
	attr String[1] name;
	attr String[1] umlUseCase; // This requires the Names of the UML Use-Cases that are included in the transformation.
	val TransformationRule[+] transformationRules; // This represents the rules that are applied to the elements in question
}

abstract class TransformationRule {
	attr String[1] name;
}

// --- Transformations ---

// This Transformation does not change the model in any way.
class NullTransformation extends TransformationRule { // implemented
}

// This Transformation adds time to all BES that correspond to an operation within an interaction
class IncreaseExectuionTime extends TransformationRule { // to be implemented
	attr String componentName;
	attr String operationName;
	attr Integer[1] time;
	attr TimeUnit unit;
}

// Calculates a new arrival rate based on the observation time and 
// the events that did arrive at the intercation.
// The arrival rate is newly calculated for each interaction.
class SetWorkloadByObservationTime extends TransformationRule { // implemented
	attr Integer time;
	attr TimeUnit unit;	
}

// Sets a specific workload for each matching interaction
// If no interaction is given the workload is set for all interactions
class SetWorkload extends TransformationRule {
	attr String[*] interactions;
	attr WorkloadType workloadType;
	attr BigDecimal value;
}

enum WorkloadType {
	OPEN;
	CLOSE;
}

enum TimeUnit {
	NANOS;
	MICROS;
	MILLIS;
	SECONDS;
}