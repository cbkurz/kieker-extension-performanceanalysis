operation UML!NamedElement isStereotypeApplied(name : String) : Boolean {
	return self.getStereotype(name).isDefined();
}

operation UML!NamedElement getStereotype(name : String) {
	
	// fail fast: if any of the variables are not defined an Exception is thrown.
	if (name.isUndefined()) {
		throw "No name for the stereotype was given.";
	}
	
	// work
	var annotations = self.getEAnnotations();
	if (annotations.size == 0) {
		return null;
	}
	
	for (anno in annotations) {
		if (anno.source == name) {
			var details = anno.getDetails();
			if (not details.isDefined()) {
				return new Map<String, String>();				
			}
			return details;
		}
	}
	
	return null;
}

operation UML!NamedElement getStereotypeValue(stereotypeName: String, key: String): String {
	
	// fail fast: if any of the variables are not defined an Exception is thrown.
	if (stereotypeName.isUndefined() and key.isUndefined()) {
		throw "Neither the StereotypeName nor the key are defined.";
	}
	if (stereotypeName.isUndefined()) {
		throw "The Name of the Stereotype is not defined.\n Key: " + key;
	}
	if (key.isUndefined()) {
		throw "The Name of the Key is not defined.\n Stereotype Name: " + stereotypeName;
	}
	
	var details = self.getStereotype(stereotypeName);
	if (not details.isDefined()) {
		return null;
	}
	
	return details.get(key);
}

operation UML!NamedElement getValue(stereotypeName: String, valueName: String) : String {
	return self.getStereotypeValue(stereotypeName, valueName);
}

operation UML!NamedElement setValue(stereotypeName: String, valueName: String, value: String) {
    if (not self.isStereotypeApplied(stereotypeName)) {
	    self.createStereotype(stereotypeName);
    }
	var details = self.getStereotype(stereotypeName);
	details.put(valueName, value);
}

operation UML!NamedElement createStereotype(stereotypeName: String) {
    var anno = self.createEAnnotation(stereotypeName);
    return anno.getDetails();
}

operation UML!NamedElement getReference(name: String): String {
	// TODO: get this by using the "Native" construct from:
	//   kieker.extension.performanceanalysis.kieker2uml.uml.Kieker2UmlUtil#REFERENCE_ANNOTATION_NAME
	var referenceName = "Reference";
	if (not self.isStereotypeApplied(referenceName)) {
		throw "Stereotype '" + referenceName + "' not found."; 
	}
	var value = self.getValue(referenceName, name);
	if (not value.isDefined()) {
		throw "Value '" + name + "' not found.";
	}
	return value;
}

// copies all EAnnotations and the details from elem1 to elem2
operation copyStereotypeToElement(elem1, elem2) {
	for (anno1 in elem1.getEAnnotations()) {
		var anno2 = elem2.getEAnnotation(anno1.source);
		if (not anno2.isDefined()) {
			anno2 = elem2.createEAnnotation(anno1.source);
		}
		var anno2 = elem2.getEAnnotation(anno1.source);
		for (entry1 in anno1.details) {
			anno2.getDetails().put(entry1.key, entry1.value);
		}
	}
}
