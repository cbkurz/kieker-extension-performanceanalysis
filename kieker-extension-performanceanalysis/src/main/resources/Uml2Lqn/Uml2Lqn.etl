import "Operations.eol";

pre {
	var gaexechost = "GaExecHost";
	var gastep = "GaStep";
	var gaworkload = "GaWorkloadEvent";
	var entryCounter : Integer = 0;
	var allBes = UML!BehaviorExecutionSpecification.all;
	
	// the usage of this blacklist of bes only works because the MOS are collected by numbering between start and end
	// MOS of the respective BES. In a recursion the BES that is called first will collect all BES that it will call
	// because the index of the start and end is wrapped around all the other sub BES and they are on the same LF.
	// Variables, once initializes, are globally availably until the context is destroyed.
	var recursiveIgnoreBesSet = new Set();
	"Start...".println();
}

post {
//	"recursiveIgnoreBesSet: ".print();
//	recursiveIgnoreBesSet.println();
"Done!".println();
}

rule Model2Schema 
	transform uml: UML!Model
	to lqn: LQN!LqnModelType
	{
		guard: uml.name <> "PrimitiveTypes"
		// "Convert nodes and actors to processors...".println();
		var nodes = UML!Node.all.equivalent();
		var actors = UML!Actor.all.equivalent("Actor2Processor");

		lqn.name = uml.name;
		lqn.processor.addAll(nodes);
		lqn.processor.addAll(actors);
	}

rule Node2Processor
	transform currentNode: UML!Node
	to proc: LQN!ProcessorType 
	{	
		/* 
		 * The guard filters the nodes:
		 * - Nodes thet are not stereotyped with <<GaExecHost>>;
		 * - A <<GaExecHost>> Node without deployments
         * - A <<GaExecHost>> Node deploying elements that are not interacting
		 */
		guard {
			/* 
			 * Gets the artifacts deployed on this Node
			 * Selects the artifacts that are interacting through their manifested component
			 */
			var components = currentNode.getDeployed().select(i | i.isInteracting());
			/* 
			 * The transformation considers nodes stereotyped with 
		     * <<GaExecHost>> and deploying interacting components
             */
			return currentNode.isStereotypeApplied(gaexechost) 
				and components.notEmpty();
		}
		// ("Create processor for node: " + node.name).println();
		/* 
		 * Retrieves the components deployed on the current node 
		 * and interacting in a scenario
		 */
		var components = currentNode.getDeployed().select(i | i.isInteracting());
		var operations = components.collect(c | c.getOperations()).flatten;

        var allTasksForProc = new Sequence(); // note this variable is used as a fall through in the rule "Operation2Task"
        var opTasks = operations.equivalent("Operation2Task");
        allTasksForProc.addAll(opTasks);

        // set multiplicity
        var multiplicity = currentNode.getValue(gaexechost, "resMult");
        if (multiplicity.isDefined()) {
            proc.multiplicity = multiplicity.asBigInteger();
        } else {
            proc.multiplicity = "1".asBigInteger();
        }
		proc.name = currentNode.name;
		proc.task = allTasksForProc;
	}
	
	
rule Actor2Processor
	transform actor: UML!Actor
	to proc: LQN!ProcessorType
	{
		guard {
			var lifelines = UML!Lifeline.all().select(i | i.represents.type = actor);
			// an actor is transformed if it interacts and has a single lifeline
			return actor.isInteracting();// and lifelines.size() = 1;
		}

//		("Create processor for actor: " + actor.name).println();
	    var lifelines = UML!Lifeline.all.select(l | l.represents.type = actor and l.isStereotypeApplied(gaworkload));
		
//		("Lifelines for actor '" + actor.name + "' found: " + lifelines.size()).println();
		
		proc.name = actor.getOwner().name;
	    var task = new LQN!TaskType;
	    
 		var closedActivityCalls = new Sequence(); // currently only synch-calls are expected
	    
	    task.name = actor.getOwner().name + "_job_class_"; // the owner of the actor is a use case
		for(lf in lifelines){
		    var entry = lf.equivalent();
		    task.entry.add(entry);
		}
		if (closedActivityCalls.size() > 0) {
			var closedEntry = LQN!EntryType;
			closedEntry.name = "closed-workload";
	    	closedEntry.type = LQN!TypeType#PH1PH2;
			closedEntry.entryPhaseActivities = new LQN!PhaseActivities;
 			closedEntry.entryPhaseActivities.activity = closedActivityCalls;
			task.add(task);
			task.scheduling = LQN!TaskSchedulingType#ref;
	    	task.multiplicity = "1"; // the multiplicity is handled within the synccalls to the different interactions
		}
		proc.task.add(task);
	}

rule ClosedWorkloadLifeline2Entry
	transform lifeline: UML!Lifeline
	to entry: LQN!EntryType
	{
		guard {
			if (not lifeline.isEntryWellFormed()) {
				return false;
			}
            return lifeline.getWorkload().get(0) == "closed";
		}
		
//		("ClosedWorkloadLifeline2Entry - Create entry for Lifeline: " + lifeline.name).println();
		
		
		var beses = lifeline.collect(l | l.getElements("BehaviorExecutionSpecification")).flatten;
	    
	    if (beses.size() != 1) {
	    	throw "Unexpected amount of BES for lifeline: " + lifeline.getOwner().name + "_" + lifeline.name;
	    }
	    
	    
	    // currently it is assumed that only one use case is processed at the time.
	    entry = beses.equivalent("BES2Entry");
	    var calls = entry.entryPhaseActivities.activity; // currently only synch-calls are expected.
	    
	    var repetitions = lifeline.getWorkload().get(1);
	    for (c in calls) {
	    	c.callsMean = repetitions;
	    }
	    closedActivityCalls.addAll(calls);
	}

/**
  * This rule transforms an interaction to a task.
  * The interaction is required to contain a lifeline that has the stereotype "GaWorkloadEvent"
  * The "pattern" attribute needs to be applied to the lifeline to get the workload for the task.
  * The BES of the Lifeline get transformed to an EntryType
*/
rule OpenWorkloadLifeline2Entry
	transform lifeline: UML!Lifeline
	to entry: LQN!EntryType 
	{
		guard {
			if (not lifeline.isEntryWellFormed()) {
				return false;
			}
            return lifeline.getWorkload().get(0) == "open";
		}
//		("OpenWorkloadLifeline2Entry - Create entry for Lifeline: " + lifeline.name).println();
		
	    var beses = lifeline.collect(l | l.getElements("BehaviorExecutionSpecification")).flatten;
	    
	    if (beses.size() != 1) {
	    	throw "Unexpected amount of BES for lifeline: " + lifeline.getOwner().name + "_" + lifeline.name;
	    }
		
		var newEntry = beses[0].equivalent("BES2Entry");
		
	    entry.name = lifeline.getOwner().name + "_job_class_" ; 
	    entry.type = LQN!TypeType#PH1PH2;
	    entry.entryPhaseActivities = newEntry.entryPhaseActivities;
	    
	    var workload = lifeline.getWorkload();
		entry.openArrivalRate = workload[1]; // workload is open since it is in this rule 		
	}

rule Operation2Task
	transform op: UML!Operation
	to task: LQN!TaskType
	{
		guard {
			/**
			 * The guard filters all the operations their 
			 * components are not interacting and
			 * not deployed on a Node
			 **/
			 var component = op.getOwner();
			 if (not component.isDefined()) {
			 	throw "There is no owning Component for Operation: " + op.name;
			 }
			 if(component.getArtifacts().isEmpty()) {
				throw "Component " + component.name + " is not represented by any Artifact";
			 }
			 return component.isInteracting();
		}
		// ("Create task for component: " + component.name).println();
	
		var component = op.getOwner();
		var besName = op.getReference("BES");
		var beses = allBes.select(b | b.name == besName);
		var entries = (beses.equivalent("BES2Entry")).asSequence(); // normally the equivalent would return a Bag
		
		// To entry interactions map
		var entryMap = new Map(); // key: entry.name | value: Sequence<LQN!EntryType>()
		for (e : LQN!EntryType in entries) { // accumulate all entries that have the same name into one list
			if (not entryMap.containsKey(e.name)) {
				entryMap.put(e.name, Sequence{e});
				continue;
			}
			entryMap.get(e.name).add(e);
		}

		/*
		 * count the amount of elements
         * count the synch-calls attribute "calls-mean"
         * normalize calls calls-mean
         * Recursions and Loops are already accounted for in BES2Activity
		*/
		var newEntries = new Sequence();
		for (es in entryMap.values()) {
			
			var newEntry = es.first();
			var total = es.size();
			

			var calls = es.collect(entr | entr.entryPhaseActivities.activity.first?.synchCall).flatten;
			var newCalls = new Sequence();
			
			// count all calls-mean for one calltype
			for (c in calls) {
				if (not c.isDefined()) {
					continue;
				}
				var nCall = newCalls.selectOne(nc | nc?.dest == c?.dest);
				if (not nCall.isDefined()) {
					newCalls.add(c);
					continue;
				}
				nCall.callsMean = nCall.callsMean.asDouble() + c.callsMean.asDouble();
			}
			
			// normalize
			for (nc in newCalls) {
				nc.callsMean = nc.callsMean.asDouble / total;
			}
			
			// host-demand-mean calculation for the cumulated entry
			var hostDemandMean = 0;
			for (e in es) {
				hostDemandMean = hostDemandMean + e.entryPhaseActivities.activity.first.hostDemandMean.asDouble();
			}
			hostDemandMean = hostDemandMean / es.size();
			
			
			newEntry.entryPhaseActivities.activity.first.synchCall = newCalls;
			newEntry.entryPhaseActivities.activity.first.hostDemandMean = hostDemandMean + "";
			newEntries.add(newEntry);
		}
				
		/*
		 * multiplicity of a task is given by the number of artifacts representing it
		 * TODO: Why? --> does this mean that more processors are available for the queue, or the other way around? (context Queuing Systems of Queuing Networks)
		 */
		var artifacts = component.getArtifacts();
		var multiplicity = artifacts.size().asString();


        var currentEntry = newEntries.first();

		task.name = currentEntry.name;
		task.entry = Sequence{currentEntry};
		task.multiplicity = multiplicity.asBigInteger();

		if (newEntries.size > 1) {
		    var last = newEntries.size - 1;
		    for (i in Sequence{1..last}) { // ignore first EntryType, it is handled beforehand
		        var e = newEntries.get(i);
		        var next = new LQN!TaskType;
		        next.name = e.name;
		        next.entry = Sequence{e};
		        task.multiplicity = multiplicity;
                allTasksForProc.add(next);
		    }
		}
	}
	
rule BES2Entry
	transform bes: UML!BehaviorExecutionSpecification // BES
	to entry: LQN!EntryType
	{	
		guard {
			/**
			 * A BES is excluded from the transformation if:
			 * It doesn't start with a UML!MessageOccurrenceSpecification;
			 * It doesn't end with a UML!MessageOccurrenceSpecification;
			 * It is not bound to a lifeline;
			 */
			if(not (bes.isWellFormed())) {
				return false;
			}
			
			// only make entries if they are not part of an existing recursion
			if (recursiveIgnoreBesSet.contains(bes)) {
				return false;
			}
			
			// A BES should belong to a single and existing Lifeline
			return bes.covered.first.isDefined();
		}
		// ("Create Entry for BehaviorExecutionSpecification: " + bes.name).println();
		

		// name is differentiated by the interaction
		entry.name = bes.getEntryName(); 
		entry.type = LQN!TypeType#PH1PH2;
		entry.entryPhaseActivities = new LQN!PhaseActivities;
 		entry.entryPhaseActivities.activity = Sequence{bes.equivalent("Bes2Activity")};
	}
	
@lazy
rule Bes2Activity
	transform bes: UML!BehaviorExecutionSpecification // BES
	to act: LQN!ActivityPhasesType 
	{
		act.name = bes.name;
		act.phase = "1".asBigInteger();
		
		// Activity host-demand-mean
		var execTime = bes.getValue(gastep, "execTime");
		var rep = bes.getValue(gastep, "rep");
		var hostDemandMean = "1.0";

		if(execTime.isDefined()) {
			hostDemandMean = execTime.asDouble() * rep.asDouble();
		}
		act.hostDemandMean = hostDemandMean + "";
		
		
		var moses = bes.getMosesSendFromLifeline(); 
		
		// Calls from the Activity
		// TODO: separate between synch and asynch
		if (not moses.isEmpty()) {
		    /**
		      * gets filled in the rule "MOS2Call" and will contain all subsequent recursive BES.
		      * All recursive call occur on the Lifeline that has the recursive Operation.
		      * This means all calls made by a recursive Operation to the recursive Operation are send from the same Lifeline.
		      * Since the MOS are collected by index, all recursions are collected in between the start and end of the
		      * first BES that is the recursion, for every recursion that occurs.
		      */
			var recursiveBesList = new Sequence();
			var calls = moses.equivalent("MOS2Call");
			
			/* 
			 * This is the loop recognition for the calls
			 * For each call that has a duplicate the repetition is increased
			 * calls that are recursive are excluded
			*/
			var filteredCalls = new Sequence();
			for (c in calls) {
				if (c.dest == bes.getEntryName()) {
					continue;
				}
				var cfList = filteredCalls.select(cf | c.dest == cf.dest);
				if (cfList.size() > 1) {
					throw "There should be only one of a kind in the list 'cfList' found: " + cfList;
				}
				if (cfList.size() == 0) {
					filteredCalls.add(c);
					continue;
				}
				var cf = cfList.first();
				cf.callsMean = (cf.callsMean.asBigInteger() + c.callsMean.asBigInteger()) + "";
			}
			act.synchCall = filteredCalls;
			hostDemandMean = hostDemandMean.asDouble() * (recursiveBesList.size() + 1).asDouble();
			act.hostDemandMean = hostDemandMean + "";

			// add all recursions to this set			
			if (recursiveBesList.size > 0) {
				recursiveIgnoreBesSet.addAll(recursiveBesList);
			}
		}
	}
	

/*
 * requires the rule "Bes2Activity" to be called before
 * required outside variables:
 *  - bes
*/
@lazy
rule MOS2Call
	transform msgo: UML!MessageOccurrenceSpecification // MOS
	to call: LQN!ActivityMakingCallType
	{
		guard {
			return msgo.isSend(); // this asks if the MOS is at the sending (lifeline) end of the message and not at the receiving (lifeline) end.
		}

//		("Create ActivityMakingCallType for MessageOccurrenceSpecification: " + msgo.name).println();

		var message = msgo.message;
		var rep = bes.getValue(gastep, "rep");

		// This is the sequence of steps that is followed to find the BES that is started by the message associated with the msgo (or MOS):
		//    Message ---MessageEnd--> Lifeline --find all--> BESes --filter with Message--> BES (that is started by the Message)
		
		// get lifeline that the message targets
		var lifeline = message.receiveEvent.covered;
		// Gets the BESes from the lifeline that is covered by the message
		var lbes = lifeline.first.getElements("BehaviorExecutionSpecification");
		// Gets the BES that is the one that the message targets
		var lbes2 = lbes.selectOne(i | i.start == message.receiveEvent and i.finish.isTypeOf(MessageOccurrenceSpecification));

		call.dest = lbes2.getEntryName();
		call.callsMean = lbes2.getValue(gastep, "rep");
		if (bes.getEntryName() == lbes2.getEntryName() ) {
			recursiveBesList.add(lbes2);
		}
	}
	
	
