import "StereotypeOperations.eol";

/**
 * Converts an element to the native Java BigInteger type
 * @return a java.math.BigInteger
 */
operation Any asBigInteger(): Native("java.math.BigInteger") {
	// Converts an element to the java native type BigInteger
	return new Native("java.math.BigInteger")(self);
}
/**
 * Retrieves the artifacts representing an element
 * @return a collection comprising the set of artifacts
 */
operation UML!NamedElement getArtifacts(): Collection {
	var artifacts = UML!Artifact.all();
	var output = new Sequence();
	
	for(artifact in artifacts) {
		var manifestation = artifact.manifestation;
		manifestation = manifestation.select(i | i.supplier.contains(self));
			
		if(manifestation.notEmpty) {
			output.add(artifact);
		}
		
	}
	
	// ("Searched artifacts for element: " + self.name).println();
	// ("Number of artifacts found: " + output.size()).println();
		
	return output;	
}

/**
 * Checks if it exists a behavioral description involving self
 * @param element: element under investigation
 * @return a boolean
 */
operation UML!NamedElement isInteracting(): Boolean {

	// Gets all the lifelines involving the input 'element'
	var lifelines = self.getRepresentedLifelines();
	
	var interacting = lifelines.select(i | i.isInteracting());
	var artifacts = self.getArtifacts().flatten;
	var deployments = artifacts.collect(i | i.getDeployments()).flatten;
	// (self.name + " is interacting: " + interacting.notEmpty()).println();
	return interacting.notEmpty();
}

operation UML!Lifeline getWorkload(): Sequence {
	var pattern = self.getStereotypeValue(gaworkload, "pattern").trim();
	var reg = '(closed|open):[0-9]+(.[0-9]+)?';
	
	if(not pattern.matches(reg)) {
		throw "value not recognized GaWorkloadEvent::pattern at " + self.name;
	}
			
	return pattern.split(":");
}

/**
 * Gets all the lifelines representing self
 * @return a Collection of Lifelines 
 */
operation UML!NamedElement getRepresentedLifelines(): Collection {
	// All the lifelines of the Model
	var lifelines = UML!Lifeline.all();
	// Get all the lifelines involving "element"
	return lifelines.select(i | i.represents.type = self);
}

/*
 * Operations on UML!Node; 
 */

/**
 * Retrieves the manifested component of the artifact deployed on the Node
 * Node --deploys-> Artifact --is Manifestation of-> Component
 * @return the object representing the deployed component 
 */
operation UML!Node getDeployed(): Collection {
	// If the deployment dependency does not exists, then the deployed element is 
	if(self.deployment.isEmpty()) {
		return new Sequence();
	}
				
	// This variable represents the 'deployment' association between a Node and an Artifact
	var deployment = self.deployment;
	// It is the object of the artifact deployed on self (Node)
	var artifacts = deployment.collect(i | i.getSuppliers()).flatten;
	
	var manifestation = artifacts.manifestation.flatten;
	return manifestation.collect(i | i.getSuppliers()).flatten;	
}

/*
 * Operations on UML!Lifeline; 
 */
operation UML!Lifeline isInteracting(): Boolean {
	return self.coveredBy.notEmpty();
}
/**
 * Returns the elements, inside a lifeline, having 'type' as type
 * @returns a OrderedSet of elements with type 'type'
 */
operation UML!Lifeline getElements(type: String): OrderedSet {
	var elements = self.coveredBy.asOrderedSet();
	return elements.select(i | i.eClass.name == type);
}


/**
 * Checks if the BehaviorExecutionSpecification is well specified.
 * This means that is has a MessageOccurrenceSpecifiation for both the 
 * start event and the finish event
 * @return a boolean stating if the property is verified or not
 */
operation UML!BehaviorExecutionSpecification isWellFormed() : Boolean {

	if ( self.start.isTypeOf(MessageOccurrenceSpecification) and self.finish.isTypeOf(MessageOccurrenceSpecification)) {
		return true;
	}
		
	return false;
}

/**
 * It is not possible in UML to set a starting BES for a Message
 * Therefore it is hard to calculate the target BES, this is a workaround.
 * The Assumption is that the InteractionsFragments or rather the MOS are in order
 * Now all MOS of the lifeline are collected that are between the start and end MOS.
 * @return a collection of MessageOccurenceSpecification
 */
operation UML!BehaviorExecutionSpecification getMosesSendFromLifeline(): Collection {	

	var lifeline = self.covered.first;
	var elements = lifeline.getElements("MessageOccurrenceSpecification"); // all MOS-elements of the lifeline!
	
	var start = elements.indexOf(self.start);
	var end = elements.indexOf(self.finish);
	
	var result = new Sequence();
	for (i in Sequence{start..end}) {
		var e = elements.at(i);
		if (e.isSend() and e.message.messageSort <> UML!MessageSort#reply) {
			result.add(e);
		}
		
	}
	
	return result;
}

operation UML!BehaviorExecutionSpecification getStartFinnishIndex(): Sequence {
	var lifeline = self.covered.first;
	var elements = lifeline.getElements("MessageOccurrenceSpecification"); // all MOS-elements of the lifeline!
	
	var start = elements.indexOf(self.start);
	var end = elements.indexOf(self.finish);
	return Sequence{start, end};
}

operation UML!BehaviorExecutionSpecification isRecursive(recursiveMap: Map) {
	if (recursiveMap.containsKey(self.name)) {
		return true;
	}
	return self.getMosesSendFromLifeline().exists(m | m.name == self.name);
}

operation UML!Artifact getDeployments() : Sequence {
	return UML!Deployment.all.select(i | i.supplier.contains(self)).flatten;
}

operation UML!BehaviorExecutionSpecification getEntryName() {
	return self.getOwner().name + "_" + self.name;
}


